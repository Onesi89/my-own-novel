/**
 * Anthropic Claude AI Provider
 * FSD: shared/lib/ai
 */

import Anthropic from '@anthropic-ai/sdk'
import { 
  AIProvider, 
  AIResponse, 
  StoryGenerationContext, 
  StoryChoice, 
  RouteContext,
  SectionGenerationContext,
  StorySectionGenerationContext
} from './types'

export class ClaudeProvider implements AIProvider {
  private client: Anthropic
  private model: string

  constructor(apiKey?: string, model = 'claude-3-5-sonnet-20241022') {
    if (!apiKey) {
      throw new Error('Claude API key is required')
    }
    
    this.client = new Anthropic({
      apiKey
    })
    this.model = model
  }

  async generateStory(context: StoryGenerationContext): Promise<AIResponse> {
    try {
      const prompt = this.buildStoryPrompt(context)
      
      const response = await this.client.messages.create({
        model: this.model,
        max_tokens: 4000,
        temperature: 0.7,
        messages: [{
          role: 'user',
          content: prompt
        }]
      })

      const content = response.content[0]
      if (content.type !== 'text') {
        throw new Error('Unexpected response type from Claude')
      }

      // ÏùëÎãµ ÌååÏã± Î∞è Íµ¨Ï°∞Ìôî
      const parsedStory = this.parseStoryResponse(content.text)

      return {
        success: true,
        data: {
          content: parsedStory.content,
          choices: parsedStory.choices,
          metadata: {
            model: this.model,
            timestamp: new Date().toISOString()
          }
        },
        tokenUsage: {
          prompt: response.usage.input_tokens,
          completion: response.usage.output_tokens,
          total: response.usage.input_tokens + response.usage.output_tokens
        }
      }
    } catch (error) {
      console.error('Claude API error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      }
    }
  }

  async generateChoices(location: RouteContext): Promise<StoryChoice> {
    try {
      const prompt = this.buildChoicesPrompt(location)
      
      const response = await this.client.messages.create({
        model: this.model,
        max_tokens: 800,
        temperature: 0.8,
        messages: [{
          role: 'user',
          content: prompt
        }]
      })

      const content = response.content[0]
      if (content.type !== 'text') {
        throw new Error('Unexpected response type from Claude')
      }

      return this.parseChoicesResponse(content.text, location)
    } catch (error) {
      console.error('Claude choices generation error:', error)
      throw error
    }
  }

  async generateSection(context: SectionGenerationContext): Promise<AIResponse> {
    try {
      const prompt = this.buildSectionPrompt(context)
      
      const response = await this.client.messages.create({
        model: this.model,
        max_tokens: 1500,
        temperature: 0.7,
        messages: [{
          role: 'user',
          content: prompt
        }]
      })

      const content = response.content[0]
      if (content.type !== 'text') {
        throw new Error('Unexpected response type from Claude')
      }

      return {
        success: true,
        data: {
          content: content.text.trim(),
          metadata: {
            model: this.model,
            location: context.route.address
          }
        },
        tokenUsage: {
          prompt: response.usage.input_tokens,
          completion: response.usage.output_tokens,
          total: response.usage.input_tokens + response.usage.output_tokens
        }
      }
    } catch (error) {
      console.error('Claude section generation error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      }
    }
  }

  async generateStorySection(context: StorySectionGenerationContext): Promise<AIResponse> {
    try {
      const prompt = this.buildStorySectionPrompt(context)
      
      const response = await this.client.messages.create({
        model: this.model,
        max_tokens: 1500,
        temperature: 0.7,
        messages: [{
          role: 'user',
          content: prompt
        }]
      })

      const content = response.content[0]
      if (content.type !== 'text') {
        throw new Error('Unexpected response type from Claude')
      }

      return {
        success: true,
        data: {
          content: content.text.trim(),
          metadata: {
            model: this.model,
            storyId: context.storyId,
            choice: context.selectedChoice
          }
        },
        tokenUsage: {
          prompt: response.usage.input_tokens,
          completion: response.usage.output_tokens,
          total: response.usage.input_tokens + response.usage.output_tokens
        }
      }
    } catch (error) {
      console.error('Claude story section generation error:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      }
    }
  }

  private buildStoryPrompt(context: StoryGenerationContext): string {
    const { routes, preferences } = context
    
    const routeInfo = routes.map((route, index) => {
      const time = new Date(route.timestamp).toLocaleString('ko-KR')
      const name = route.customInfo?.customName || route.address
      const description = route.customInfo?.description || ''
      const duration = route.duration ? `${route.duration}Î∂Ñ Ï≤¥Î•ò` : ''
      
      return `${index + 1}. ${name}
   - ÏãúÍ∞Ñ: ${time}
   - ${duration}
   - ${description}`
    }).join('\n\n')

    return `ÎãπÏã†ÏùÄ Ï∞ΩÏùòÏ†ÅÏù∏ ÏûëÍ∞ÄÏûÖÎãàÎã§. Ï£ºÏñ¥ÏßÑ Ïã§Ï†ú Ïù¥Îèô Í≤ΩÎ°úÎ•º Î∞îÌÉïÏúºÎ°ú ${preferences.genre} Ïû•Î•¥Ïùò ${preferences.length}Ïûê Î∂ÑÎüâ ÏÜåÏÑ§ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.

**ÏûëÏÑ± Ï°∞Í±¥:**
- Ïû•Î•¥: ${preferences.genre}
- Î∂ÑÎüâ: ${preferences.length}Ïûê ÎÇ¥Ïô∏
- ÏãúÏ†ê: ${preferences.style === 'first_person' ? '1Ïù∏Ïπ≠' : '3Ïù∏Ïπ≠'}
- ÌÜ§: ${preferences.tone}
- Ï£ºÏù∏Í≥µ: "ÎÇò" (Ïã§Ï†ú Í≤ΩÌóòÌïú ÏÇ¨Îûå Í¥ÄÏ†ê)

**Ïù¥Îèô Í≤ΩÎ°ú Ï†ïÎ≥¥:**
${routeInfo}

**ÏöîÍµ¨ÏÇ¨Ìï≠:**
1. Í∞Å Ïû•ÏÜåÏóêÏÑú Î≤åÏñ¥Ïßà Ïàò ÏûàÎäî Ìù•ÎØ∏Î°úÏö¥ ÏÇ¨Í±¥ÏùÑ Ï∞ΩÏ°∞Ìï¥Ï£ºÏÑ∏Ïöî
2. Ïû•ÏÜå Í∞Ñ Ïù¥ÎèôÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïó∞Í≤∞Ìï¥Ï£ºÏÑ∏Ïöî
3. ÌòÑÏã§Ï†ÅÏù¥Î©¥ÏÑúÎèÑ Ïû¨ÎØ∏ÏûàÎäî Ïä§ÌÜ†Î¶¨Î°ú ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî
4. Í∞Å Ïù¥Îèô Í≤ΩÎ°úÏóê ÎåÄÌï¥ ÌïòÎÇòÏùò ÏÑ†ÌÉùÏßÄÎßå Ï†úÏãúÌï¥Ï£ºÏÑ∏Ïöî (Ï¥ù ${routes.length}Í∞úÏùò ÏÑ†ÌÉùÏßÄ)

**ÏùëÎãµ ÌòïÏãù:**
Ï†úÎ™©: [Ï∞ΩÏùòÏ†ÅÏù∏ Ï†úÎ™©]

[ÏÜåÏÑ§ ÎÇ¥Ïö©]

**ÏÑ†ÌÉùÏßÄ:**
> ### üéØ [Ïû•ÏÜåÎ™Ö] - [ÏÉÅÌô© ÏÑ§Î™Ö]
> 
> 1) [ÏÑ†ÌÉùÏßÄ 1]
> 2) [ÏÑ†ÌÉùÏßÄ 2]
> 3) [ÏÑ†ÌÉùÏßÄ 3]

ÏÜåÏÑ§ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.`
  }

  private buildChoicesPrompt(location: RouteContext): string {
    const time = new Date(location.timestamp).toLocaleString('ko-KR')
    const name = location.customInfo?.customName || location.address
    
    return `Îã§Ïùå Ïû•ÏÜåÏóêÏÑú Î≤åÏñ¥Ïßà Ïàò ÏûàÎäî Ìù•ÎØ∏Î°úÏö¥ ÏÉÅÌô©Í≥º ÏÑ†ÌÉùÏßÄ 3Í∞úÎ•º ÎßåÎì§Ïñ¥Ï£ºÏÑ∏Ïöî:

**Ïû•ÏÜå Ï†ïÎ≥¥:**
- Ïû•ÏÜå: ${name}
- ÏãúÍ∞Ñ: ${time}
- Ï≤¥Î•ò ÏãúÍ∞Ñ: ${location.duration || 'Ïïå Ïàò ÏóÜÏùå'}Î∂Ñ

**ÏöîÍµ¨ÏÇ¨Ìï≠:**
1. Ìï¥Îãπ Ïû•ÏÜåÏùò ÌäπÏÑ±ÏùÑ Î∞òÏòÅÌïú ÏÉÅÌô© ÏÑ§Ï†ï
2. Í∞Å ÏÑ†ÌÉùÏßÄÎäî Ïä§ÌÜ†Î¶¨ Ï†ÑÍ∞úÏóê ÏòÅÌñ•ÏùÑ Ï£ºÏñ¥Ïïº Ìï®
3. ÌòÑÏã§Ï†ÅÏù¥Î©¥ÏÑúÎèÑ Ìù•ÎØ∏Î°úÏö¥ ÏÑ†ÌÉùÏßÄ

**ÏùëÎãµ ÌòïÏãù:**
> ### üéØ ÏÉÅÌô©: [Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÉÅÌô© ÏÑ§Î™Ö]
> 
> 1) [ÏÑ†ÌÉùÏßÄ 1 Ï†úÎ™©] - [Í∞ÑÎã®Ìïú ÏÑ§Î™Ö]
> 2) [ÏÑ†ÌÉùÏßÄ 2 Ï†úÎ™©] - [Í∞ÑÎã®Ìïú ÏÑ§Î™Ö]  
> 3) [ÏÑ†ÌÉùÏßÄ 3 Ï†úÎ™©] - [Í∞ÑÎã®Ìïú ÏÑ§Î™Ö]`
  }

  private buildSectionPrompt(context: SectionGenerationContext): string {
    const { route, preferences, previousContext, selectedChoice } = context
    const name = route.customInfo?.customName || route.address
    
    return `Ïù¥Ï†Ñ Îß•ÎùΩÏùÑ Ïù¥Ïñ¥Î∞õÏïÑ Îã§Ïùå Ïû•ÏÜåÏóêÏÑúÏùò Ïù¥ÏïºÍ∏∞Î•º Í≥ÑÏÜç ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:

**Ïù¥Ï†Ñ Îß•ÎùΩ:**
${previousContext}

**ÌòÑÏû¨ Ïû•ÏÜå:**
- Ïû•ÏÜå: ${name}
- ÏÑ†ÌÉùÎêú ÏÉÅÌô©: ${selectedChoice || 'ÌäπÎ≥ÑÌïú ÏÑ†ÌÉù ÏóÜÏùå'}

**ÏöîÍµ¨ÏÇ¨Ìï≠:**
- Ïû•Î•¥: ${preferences.genre}
- ÌÜ§: ${preferences.tone}
- ÏãúÏ†ê: ${preferences.style === 'first_person' ? '1Ïù∏Ïπ≠' : '3Ïù∏Ïπ≠'}
- Î∂ÑÎüâ: 800-1200Ïûê
- Ïù¥Ï†Ñ Îß•ÎùΩÍ≥º ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïó∞Í≤∞
- ÏÑ†ÌÉùÎêú ÏÉÅÌô©ÏùÑ Î∞òÏòÅÌïú Ï†ÑÍ∞ú

Ïù¥ÏïºÍ∏∞Î•º Í≥ÑÏÜçÌï¥ÏÑú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:`
  }

  private buildStorySectionPrompt(context: StorySectionGenerationContext): string {
    const { currentContent, selectedChoice, preferences } = context
    
    return `Í∏∞Ï°¥ ÏÜåÏÑ§Ïùò Ïó∞Ïû•ÏÑ†ÏóêÏÑú ÏÑ†ÌÉùÏßÄÏóê Îî∞Î•∏ Îã§Ïùå ÏÑπÏÖòÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:

**Í∏∞Ï°¥ ÏÜåÏÑ§:**
${currentContent.length > 2000 ? currentContent.substring(currentContent.length - 2000) : currentContent}

**ÏÑ†ÌÉùÎêú ÏÉÅÌô©:**
- Ïû•ÏÜå: ${selectedChoice.location}
- ÏßàÎ¨∏: ${selectedChoice.question}
- ÏÑ†ÌÉù: ${selectedChoice.selectedOption}
- ÏÑ§Î™Ö: ${selectedChoice.optionDescription}

**ÏöîÍµ¨ÏÇ¨Ìï≠:**
- Ïû•Î•¥: ${preferences.genre}
- ÌÜ§: ${preferences.tone}
- ÏãúÏ†ê: ${preferences.style === 'first_person' ? '1Ïù∏Ïπ≠' : '3Ïù∏Ïπ≠'}
- Î∂ÑÎüâ: 500-800Ïûê
- ÏÑ†ÌÉùÎêú ÏÉÅÌô©ÏùÑ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïù¥Ïñ¥Í∞ÄÍ∏∞
- Í∏∞Ï°¥ Ïä§ÌÜ†Î¶¨ÏôÄ ÏùºÍ¥ÄÏÑ± Ïú†ÏßÄ

**ÏùëÎãµ ÌòïÏãù:**
### üìç ÏÇ¨Ïö©ÏûêÏùò ÏÑ†ÌÉù: **${selectedChoice.selectedOption}**

[Ïù¥Ïñ¥ÏßÄÎäî ÏÜåÏÑ§ ÎÇ¥Ïö©]

**ÏÉàÎ°úÏö¥ ÏÑ†ÌÉùÏßÄ (ÏÑ†ÌÉùÏÇ¨Ìï≠):**
> ### üéØ [Ïû•ÏÜåÎ™Ö] - [ÏÉÅÌô© ÏÑ§Î™Ö]
> 
> 1) [ÏÑ†ÌÉùÏßÄ 1]
> 2) [ÏÑ†ÌÉùÏßÄ 2]

ÏÉàÎ°úÏö¥ ÏÑπÏÖòÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî:`
  }

  private parseStoryResponse(response: string): { content: string; choices: StoryChoice[] } {
    // Ï†úÎ™©Í≥º Î≥∏Î¨∏ Î∂ÑÎ¶¨
    const titleMatch = response.match(/Ï†úÎ™©:\s*(.+)/i)
    const title = titleMatch ? titleMatch[1].trim() : ''
    
    // ÏÑ†ÌÉùÏßÄ ÌååÏã±
    const choiceRegex = /\*\*ÏÑ†ÌÉùÏßÄ:\*\*\s*([\s\S]*?)(?=\n\n|\*\*|$)/g
    const choices: StoryChoice[] = []
    let match
    
    while ((match = choiceRegex.exec(response)) !== null) {
      const choiceText = match[1]
      const locationMatch = choiceText.match(/([^-]+)\s*-\s*([^1-9]+)/i)
      
      if (locationMatch) {
        const location = locationMatch[1].trim()
        const question = locationMatch[2].trim()
        
        const optionRegex = /(\d+)\)\s*([^-\n]+)(?:\s*-\s*([^\n]+))?/g
        const options: { id: string; text: string; description: string }[] = []
        let optionMatch
        
        while ((optionMatch = optionRegex.exec(choiceText)) !== null) {
          options.push({
            id: `choice_${Date.now()}_${optionMatch[1]}`,
            text: optionMatch[2].trim(),
            description: optionMatch[3]?.trim() || ''
          })
        }
        
        if (options.length > 0) {
          choices.push({
            id: `location_${Date.now()}_${location}`,
            location,
            question,
            options
          })
        }
      }
    }
    
    // Î≥∏Î¨∏ÏóêÏÑú ÏÑ†ÌÉùÏßÄ Î∂ÄÎ∂Ñ Ï†úÍ±∞
    const contentWithoutChoices = response
      .replace(/Ï†úÎ™©:\s*[^\n]+\n*/i, '')
      .replace(/\*\*ÏÑ†ÌÉùÏßÄ:\*\*[\s\S]*$/g, '')
      .trim()
    
    const content = title ? `# ${title}\n\n${contentWithoutChoices}` : contentWithoutChoices
    
    return { content, choices }
  }

  private parseChoicesResponse(response: string, location: RouteContext): StoryChoice {
    const situationMatch = response.match(/ÏÉÅÌô©:\s*(.+)/i)
    const situation = situationMatch ? situationMatch[1].trim() : 'Ìù•ÎØ∏Î°úÏö¥ ÏÉÅÌô©Ïù¥ Î≤åÏñ¥ÏßëÎãàÎã§.'
    
    const optionRegex = /(\d+)\)\s*([^-\n]+)(?:\s*-\s*([^\n]+))?/g
    const options: { id: string; text: string; description: string }[] = []
    let match
    
    while ((match = optionRegex.exec(response)) !== null) {
      options.push({
        id: `choice_${Date.now()}_${match[1]}`,
        text: match[2].trim(),
        description: match[3]?.trim() || ''
      })
    }
    
    return {
      id: `location_${Date.now()}_${location.id}`,
      location: location.customInfo?.customName || location.address,
      question: situation,
      options
    }
  }
}