-- AI 캐시 테이블 생성
-- 생성일: 2025-01-07
-- 목적: AI API 응답 캐싱을 통한 비용 절감 및 성능 향상

CREATE TABLE IF NOT EXISTS ai_cache (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cache_key VARCHAR(64) NOT NULL UNIQUE, -- SHA256 해시
    original_key TEXT, -- 원본 키 (디버깅용, 500자 제한)
    content TEXT NOT NULL, -- 캐시된 AI 응답 내용
    choices JSONB, -- AI 선택지 데이터
    token_usage JSONB NOT NULL, -- 토큰 사용량 정보
    provider VARCHAR(20) NOT NULL, -- AI 제공자 (gemini, claude)
    quality DECIMAL(3,2) DEFAULT 1.0, -- 품질 점수 (0.0-1.0)
    expires_at TIMESTAMPTZ NOT NULL, -- 만료 시각
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    last_accessed TIMESTAMPTZ DEFAULT NOW(),
    hit_count INTEGER DEFAULT 0 -- 캐시 히트 횟수
);

-- 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_ai_cache_key ON ai_cache(cache_key);
CREATE INDEX IF NOT EXISTS idx_ai_cache_expires ON ai_cache(expires_at);
CREATE INDEX IF NOT EXISTS idx_ai_cache_created ON ai_cache(created_at);
CREATE INDEX IF NOT EXISTS idx_ai_cache_provider ON ai_cache(provider);

-- RLS (Row Level Security) 설정
ALTER TABLE ai_cache ENABLE ROW LEVEL SECURITY;

-- 캐시는 시스템 레벨이므로 인증된 모든 사용자가 읽기 가능
CREATE POLICY "Anyone can read ai_cache" ON ai_cache
    FOR SELECT USING (true);

-- 캐시 쓰기는 인증된 사용자만 가능
CREATE POLICY "Authenticated users can insert ai_cache" ON ai_cache
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- 캐시 업데이트는 인증된 사용자만 가능 (히트 카운트 업데이트용)
CREATE POLICY "Authenticated users can update ai_cache" ON ai_cache
    FOR UPDATE USING (auth.role() = 'authenticated');

-- 캐시 삭제는 인증된 사용자만 가능 (정리용)
CREATE POLICY "Authenticated users can delete ai_cache" ON ai_cache
    FOR DELETE USING (auth.role() = 'authenticated');

-- 자동 정리 함수 (만료된 캐시 삭제)
CREATE OR REPLACE FUNCTION cleanup_expired_ai_cache()
RETURNS void
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM ai_cache
    WHERE expires_at < NOW();
END;
$$;

-- 통계 함수
CREATE OR REPLACE FUNCTION get_ai_cache_stats()
RETURNS TABLE(
    total_entries BIGINT,
    active_entries BIGINT,
    expired_entries BIGINT,
    total_hits BIGINT,
    avg_hit_count DECIMAL,
    hit_rate DECIMAL
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*) as total_entries,
        COUNT(*) FILTER (WHERE expires_at > NOW()) as active_entries,
        COUNT(*) FILTER (WHERE expires_at <= NOW()) as expired_entries,
        COALESCE(SUM(hit_count), 0) as total_hits,
        COALESCE(AVG(hit_count), 0) as avg_hit_count,
        CASE 
            WHEN COUNT(*) > 0 THEN 
                COALESCE(SUM(hit_count), 0)::DECIMAL / COUNT(*)::DECIMAL
            ELSE 0
        END as hit_rate
    FROM ai_cache;
END;
$$;

-- 코멘트 추가
COMMENT ON TABLE ai_cache IS 'AI API 응답 캐시 테이블 - 비용 절감 및 성능 향상용';
COMMENT ON COLUMN ai_cache.cache_key IS 'SHA256 해시된 캐시 키 (유니크)';
COMMENT ON COLUMN ai_cache.content IS '캐시된 AI 응답 내용';
COMMENT ON COLUMN ai_cache.choices IS 'AI 선택지 데이터 (JSONB)';
COMMENT ON COLUMN ai_cache.token_usage IS '토큰 사용량 정보 (prompt, completion, total)';
COMMENT ON COLUMN ai_cache.quality IS '응답 품질 점수 (0.0-1.0)';
COMMENT ON COLUMN ai_cache.hit_count IS '캐시 히트 횟수 (인기도 측정)';